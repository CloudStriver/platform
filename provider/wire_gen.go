// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/CloudStriver/platform-comment/biz/adaptor"
	"github.com/CloudStriver/platform-comment/biz/application/service"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/config"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/kq"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/comment"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/label"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/relation"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/subject"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/stores/redis"
)

// Injectors from wire.go:

func NewPlatformServerImpl() (*adaptor.PlatformServerImpl, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	iMongoMapper := comment.NewMongoMapper(configConfig)
	subjectIMongoMapper := subject.NewMongoMapper(configConfig)
	commentService := &service.CommentService{
		CommentMongoMapper: iMongoMapper,
		SubjectMongoMapper: subjectIMongoMapper,
	}
	iEsMapper := label.NewEsMapper(configConfig)
	labelIMongoMapper := label.NewMongoMapper(configConfig)
	labelService := &service.LabelService{
		LabelEsMapper:    iEsMapper,
		LabelMongoMapper: labelIMongoMapper,
	}
	deleteCommentRelationKq := kq.NewDeleteCommentRelationKq(configConfig)
	subjectService := &service.SubjectService{
		SubjectMongoMapper:   subjectIMongoMapper,
		DeleteFileRelationKq: deleteCommentRelationKq,
	}
	redisRedis := redis.NewRedis(configConfig)
	relationNeo4jMapper := relation.NewNeo4jMapper(configConfig)
	relationServiceImpl := &service.RelationServiceImpl{
		Config:        configConfig,
		Redis:         redisRedis,
		RelationModel: relationNeo4jMapper,
	}
	platformServerImpl := &adaptor.PlatformServerImpl{
		Config:          configConfig,
		CommentService:  commentService,
		LabelService:    labelService,
		SubjectService:  subjectService,
		RelationService: relationServiceImpl,
	}
	return platformServerImpl, nil
}
