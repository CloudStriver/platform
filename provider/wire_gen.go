// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package provider

import (
	"github.com/CloudStriver/platform-comment/biz/adaptor"
	"github.com/CloudStriver/platform-comment/biz/application/service"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/config"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/comment"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/label"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/labelEntity"
	"github.com/CloudStriver/platform-comment/biz/infrastructure/mapper/subject"
)

// Injectors from wire.go:

func NewCommentServerImpl() (*adaptor.CommentServerImpl, error) {
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	iMongoMapper := comment.NewMongoMapper(configConfig)
	subjectIMongoMapper := subject.NewMongoMapper(configConfig)
	commentService := &service.CommentService{
		CommentMongoMapper: iMongoMapper,
		SubjectMongoMapper: subjectIMongoMapper,
	}
	iEsMapper := label.NewEsMapper(configConfig)
	labelIMongoMapper := label.NewMongoMapper(configConfig)
	labelEntityIMongoMapper := labelEntity.NewMongoMapper(configConfig)
	labelService := &service.LabelService{
		LabelEsMapper:     iEsMapper,
		LabelMongoMapper:  labelIMongoMapper,
		EntityMongoMapper: labelEntityIMongoMapper,
	}
	subjectService := &service.SubjectService{
		SubjectMongoMapper: subjectIMongoMapper,
	}
	commentServerImpl := &adaptor.CommentServerImpl{
		Config:         configConfig,
		CommentService: commentService,
		LabelService:   labelService,
		SubjectService: subjectService,
	}
	return commentServerImpl, nil
}
